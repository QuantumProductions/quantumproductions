Smooth Systems: Designing for Fun with Consistency

Designing for Fun

Have you ever been stuck in a boss fight, dodging the boss's super attack and for a split second you see -- this is it -- the boss's heart (or head) is right next to you! Time to use your own super move.. and.. what? The boss is still invincible? What the hell? Then you learn (perhaps by brute trial & error) that there are several more sequences you must learn before you can hurt the boss.

At the outset, this kind of sucks, but as a player you quickly learn "Boss is invincible there".. then get to play through, and enjoy, the next sequence of attacks. In the end you get to look back on a tense fight where you put all of your skills carefully honed over the game's progress to the test and be proud of your accomplishment.

In many multiplayer games, recently killed players re-enter the game with "spawn invincibility", 99% of the time with no in-game fiction to support it. But players invariably understand -- it's to prevent the frustrating "spawn-killing" tactic from suceeding, where a player spawns and is immediately blasted by a fatal attack from a cunning opponent. 

In both of these examples, game designers "Follow the Fun" over Consistent gameplay -- and it works, right?

Consistency

Let's look at another example, where designing for Consistency results in even more fun.

People love to find solutions to problems. Game designers spend a lot of effort (gamasutra tutorial link) on tutorials (quantum pilot tutorial link) teaching players the language of their game to empower their expression & mastery. But not every combiniation needs to be explicitly pointed out. Supporting discovery (frog fractions 2) gives players "aha" moments and a deeper sense of mastery.

Take a look at the Shield mechanics of Super Smash Bros. 64. Normally, shielding an attack protects the defending player -- allowing for an easy counter attack. This is especially common when defending against jump attacks. The attacking player hits the shield, then the ground, and is stuck watching their character tumble through a recovery animation before they can move again. Meanwhile the shielding player has plenty of time to effect their own attack. Shielding the jump in Atack is a core expression in the game's language.

But there's another level. Players who perform a Jump in Attack can tap the shield button on landing to trigger a "Land Cancel" - instantly zeroing the attack's recovery animation.

/headshots

